#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

numero = int(input("Ingrese un numero entero positivo: "))
print(f"Factorial de {numero}: {factorial(numero)}")


#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
posicion = int(input("Ingrese la posicion hasta donde desea ver la serie de Fibonacci: "))
print("Serie de Fibonacci:")
for i in range(posicion):
    print(fibonacci(i), end=" ")
print()


#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))
print(f"{base}^{exponente} = {potencia(base, exponente)}")

#4)Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:
#1. Dividir el n√∫mero por 2.
#2. Guardar el resto (0 o 1).
#3. Repetir el proceso con el cociente hasta que llegue a 0.
#4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.
#üß† Ejemplo:
#Convertir el n√∫mero 10 a binario:
#10 √∑ 2 = 5 resto: 0
#5 √∑ 2 = 2 resto: 1
#2 √∑ 2 = 1 resto: 0
#1 √∑ 2 = 0 resto: 1
#Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010".

def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)
numero_decimal = int(input("Ingrese un numero decimal entero positivo: "))
if numero_decimal == 0:
    print("El numero binario es: 0")
else:
    numero_binario = decimal_a_binario(numero_decimal)
    print(f"El numero binario es: {numero_binario}")

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
#Requisitos: La soluci√≥n debe ser recursiva. No se debe usar [::-1] ni la funci√≥n reversed().
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])
palabra = input("Ingrese una palabra sin espacios ni tildes: ").lower()
if es_palindromo(palabra):
    print(f"La palabra '{palabra}' es un palindromo.")
else:
    print(f"La palabra '{palabra}' no es un palindromo.")


#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#Restricciones:
#No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
#Ejemplos:
#suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
#suma_digitos(9) ‚Üí 9
#suma_digitos(305) ‚Üí 8 (3 + 0 + 5)
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)
print(suma_digitos(1234))
print(suma_digitos(9))
print(suma_digitos(305))


#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

print(contar_bloques(1))
print(contar_bloques(2))
print(contar_bloques(4))


#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

print(contar_digito(12233421, 2))
print(contar_digito(5555, 5))
print(contar_digito(123456, 7))
